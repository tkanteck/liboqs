name: Linux tests

permissions:
  contents: read

on: [workflow_call, workflow_dispatch]

jobs:

  linux:
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: noble-no-sha3-avx512vl
            runner: ubuntu-latest
            container: openquantumsafe/ci-ubuntu-latest:latest
            CMAKE_ARGS: -DOQS_USE_SHA3_AVX512VL=OFF
            PYTEST_ARGS: --ignore=tests/test_leaks.py --ignore=tests/test_kat_all.py
    runs-on: ${{ matrix.runner }}
    container:
      image: ${{ matrix.container }}
    steps:
      - name: Checkout code
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # pin@v4
      - name: Configure
        run: mkdir build && cd build && cmake -GNinja ${{ matrix.CMAKE_ARGS }} .. && cmake -LA -N ..
      - name: Build
        run: ninja
        working-directory: build
      - name: Check the library artifacts
        if: matrix.name == 'jammy-std-openssl3-dlopen'
        run: |
          nm -gu lib/liboqs.so | sed -n 's/^[[:space:]]*[Uw] \([^_].*\)/\1/p' > undefined-syms.txt &&
          ! (grep '^\(CRYPTO\|ERR\|EVP\|OPENSSL\|RAND\)_' undefined-syms.txt)
        working-directory: build
      - name: Run tests
        timeout-minutes: 60
        run: mkdir -p tmp && python3 -m pytest --verbose --ignore=tests/test_code_conventions.py --numprocesses=auto ${{ matrix.PYTEST_ARGS }}
      - name: Package .deb
        if: matrix.name == 'jammy-std-openssl3'
        run: cpack
        working-directory: build
      - name: Retain .deb file
        if: matrix.name == 'jammy-std-openssl3'
        uses: actions/upload-artifact@1746f4ab65b179e0ea60a494b83293b640dd5bba # pin@v4
        with:
          name: liboqs-openssl3-shared-x64
          path: build/*.deb
      - name: Check STD algorithm and alias
        if: matrix.name == 'jammy-std-openssl3'
        run: 'tests/dump_alg_info | grep -zoP "ML-DSA-44:\n    isnull: false" && tests/dump_alg_info | grep -zoP "ML-KEM-512:\n    isnull: false"'
        working-directory: build

  linux_x86_emulated:
    runs-on: ubuntu-latest
    container:
      image: openquantumsafe/ci-ubuntu-latest:latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: avx512-ml-kem_ml-dsa
            SDE_ARCH: -skx
            CMAKE_ARGS: -DOQS_MINIMAL_BUILD="KEM_ml_kem_512;KEM_ml_kem_768;KEM_ml_kem_1024;SIG_ml_dsa_44;SIG_ml_dsa_65;SIG_ml_dsa_87"
            PYTEST_ARGS: tests/test_hash.py::test_sha3 tests/test_kat.py tests/test_acvp_vectors.py
    env:
      SDE_URL: https://downloadmirror.intel.com/850782/sde-external-9.53.0-2025-03-16-lin.tar.xz
    steps:
      - name: Checkout code
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # pin@v4
      - name: Setup Intel SDE
        run: |
          wget -O sde.tar.xz "$SDE_URL" && \
          mkdir sde && tar -xf sde.tar.xz -C sde --strip-components=1 && \
          echo "$(pwd)/sde" >> $GITHUB_PATH
      - name: Configure
        run: mkdir build && cd build && cmake -GNinja ${{ matrix.CMAKE_ARGS }} .. && cmake -LA -N ..
      - name: Build
        run: ninja
        working-directory: build
      - name: Run tests
        timeout-minutes: 60
        run: |
          mkdir -p tmp && sde64 ${{ matrix.SDE_ARCH }} -- \
          python3 -m pytest --verbose --numprocesses=auto ${{ matrix.PYTEST_ARGS }}
